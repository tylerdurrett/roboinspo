/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Youtube = {
  _type: 'youtube'
  url: string
}

export type FileBlock = {
  _type: 'fileBlock'
  file: {
    asset: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    media?: unknown
    _type: 'file'
  }
  caption?: string
}

export type Callout = {
  _type: 'callout'
  tone?: 'neutral' | 'info' | 'success' | 'warning' | 'destructive'
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | ({
      _key: string
    } & Youtube)
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
      _key: string
    }
  | ({
      _key: string
    } & Callout)
  | ({
      _key: string
    } & MuxVideo)
  | ({
      _key: string
    } & FileBlock)
  | ({
      _key: string
    } & Table)
>

export type ReadingList = {
  _id: string
  _type: 'readingList'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  originalTitle?: string
  slug: Slug
  originalUrl: string
  category?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  featuredImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
  savedAt?: string
  detailedSummary?: string
  keyPoints?: Array<string>
  conclusion?: string
  shortSummary?: string
  gist?: string
  newTitle?: string
  discussionDetailedSummary?: string
  keyAgreeingViewpoints?: Array<string>
  keyOpposingViewpoints?: Array<string>
  sentiment?: string
  discussionShortSummary?: string
  discussionGist?: string
  discussionTitle?: string
  body?: BlockContent
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  subtitle?: string
  intro?: string
  excerpt: string
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  category?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
  hideMainImageOnPost?: boolean
  mainVideo?: MuxVideo
  publishedAt: string
  editedAt?: string
  body: BlockContent
}

export type Category = {
  _id: string
  _type: 'category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  description?: string
  parent?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Table = {
  _type: 'table'
  rows?: Array<
    {
      _key: string
    } & TableRow
  >
}

export type TableRow = {
  _type: 'tableRow'
  cells?: Array<string>
}

export type MuxVideo = {
  _type: 'mux.video'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset'
  }
}

export type MuxVideoAsset = {
  _id: string
  _type: 'mux.videoAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  status?: string
  assetId?: string
  playbackId?: string
  filename?: string
  thumbTime?: number
  data?: MuxAssetData
}

export type MuxAssetData = {
  _type: 'mux.assetData'
  resolution_tier?: string
  upload_id?: string
  created_at?: string
  id?: string
  status?: string
  max_stored_resolution?: string
  passthrough?: string
  encoding_tier?: string
  master_access?: string
  aspect_ratio?: string
  duration?: number
  max_stored_frame_rate?: number
  mp4_support?: string
  max_resolution_tier?: string
  tracks?: Array<
    {
      _key: string
    } & MuxTrack
  >
  playback_ids?: Array<
    {
      _key: string
    } & MuxPlaybackId
  >
  static_renditions?: MuxStaticRenditions
}

export type MuxStaticRenditions = {
  _type: 'mux.staticRenditions'
  status?: string
  files?: Array<
    {
      _key: string
    } & MuxStaticRenditionFile
  >
}

export type MuxStaticRenditionFile = {
  _type: 'mux.staticRenditionFile'
  ext?: string
  name?: string
  width?: number
  bitrate?: number
  filesize?: number
  height?: number
}

export type MuxPlaybackId = {
  _type: 'mux.playbackId'
  id?: string
  policy?: string
}

export type MuxTrack = {
  _type: 'mux.track'
  id?: string
  type?: string
  max_width?: number
  max_frame_rate?: number
  duration?: number
  max_height?: number
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | Youtube
  | FileBlock
  | Callout
  | BlockContent
  | ReadingList
  | Post
  | Category
  | Author
  | Table
  | TableRow
  | MuxVideo
  | MuxVideoAsset
  | MuxAssetData
  | MuxStaticRenditions
  | MuxStaticRenditionFile
  | MuxPlaybackId
  | MuxTrack
  | MediaTag
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/models/blog.ts
// Variable: postsQuery
// Query: *[    _type == "post"    && defined(slug.current)  ]|order(publishedAt desc)[0...$limit]{    _id,     title,     slug,     publishedAt,     excerpt,     body[]{      ...,      _type == "mux.video" => {        asset->      }    },     category->{title, slug},     mainImage,     mainVideo{..., asset->},    author->{name, image}  }
export type PostsQueryResult = Array<{
  _id: string
  title: string
  slug: Slug
  publishedAt: string
  excerpt: string
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'callout'
        tone?: 'destructive' | 'info' | 'neutral' | 'success' | 'warning'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'normal'
          listItem?: never
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'fileBlock'
        file: {
          asset: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
          }
          media?: unknown
          _type: 'file'
        }
        caption?: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | {
        _key: string
        _type: 'mux.video'
        asset: {
          _id: string
          _type: 'mux.videoAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          status?: string
          assetId?: string
          playbackId?: string
          filename?: string
          thumbTime?: number
          data?: MuxAssetData
        } | null
      }
    | {
        _key: string
        _type: 'table'
        rows?: Array<
          {
            _key: string
          } & TableRow
        >
      }
    | {
        _key: string
        _type: 'youtube'
        url: string
      }
  >
  category: {
    title: string
    slug: Slug
  } | null
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
  mainVideo: {
    _type: 'mux.video'
    asset: {
      _id: string
      _type: 'mux.videoAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      status?: string
      assetId?: string
      playbackId?: string
      filename?: string
      thumbTime?: number
      data?: MuxAssetData
    } | null
  } | null
  author: {
    name: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    } | null
  } | null
}>
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug && category->slug.current == $categorySlug][0]{      _id,       title,       slug,       subtitle,       intro,       category->{title, slug},       publishedAt,       editedAt,       excerpt,       mainImage{..., "caption": caption},      hideMainImageOnPost,      mainVideo{..., asset->},      body[]{        ...,        _type == "mux.video" => {          asset->        }      },       author->{name, image}    }
export type PostQueryResult = {
  _id: string
  title: string
  slug: Slug
  subtitle: string | null
  intro: string | null
  category: {
    title: string
    slug: Slug
  } | null
  publishedAt: string
  editedAt: string | null
  excerpt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption: string | null
    _type: 'image'
  }
  hideMainImageOnPost: boolean | null
  mainVideo: {
    _type: 'mux.video'
    asset: {
      _id: string
      _type: 'mux.videoAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      status?: string
      assetId?: string
      playbackId?: string
      filename?: string
      thumbTime?: number
      data?: MuxAssetData
    } | null
  } | null
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'callout'
        tone?: 'destructive' | 'info' | 'neutral' | 'success' | 'warning'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'normal'
          listItem?: never
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'fileBlock'
        file: {
          asset: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
          }
          media?: unknown
          _type: 'file'
        }
        caption?: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | {
        _key: string
        _type: 'mux.video'
        asset: {
          _id: string
          _type: 'mux.videoAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          status?: string
          assetId?: string
          playbackId?: string
          filename?: string
          thumbTime?: number
          data?: MuxAssetData
        } | null
      }
    | {
        _key: string
        _type: 'table'
        rows?: Array<
          {
            _key: string
          } & TableRow
        >
      }
    | {
        _key: string
        _type: 'youtube'
        url: string
      }
  >
  author: {
    name: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    } | null
  } | null
} | null

// Source: ./src/models/category.ts
// Variable: categoriesQuery
// Query: *[    _type == "category"    && count(*[_type == "readingList" && references(^._id)]) > 0  ]|order(title asc){    _id,    title,    slug,    description  }
export type CategoriesQueryResult = Array<{
  _id: string
  title: string
  slug: Slug
  description: string | null
}>

// Source: ./src/models/readingList.ts
// Variable: readingListItemsQuery
// Query: *[    _type == "readingList"    && defined(slug.current)  ]|order(savedAt desc)[0...$limit]{    _id,     title,     slug,     originalUrl,    savedAt,     body[]{      ...,      _type == "mux.video" => {        asset->      }    },     category->{title, slug},     featuredImage  }
export type ReadingListItemsQueryResult = Array<{
  _id: string
  title: string
  slug: Slug
  originalUrl: string
  savedAt: string | null
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'callout'
        tone?: 'destructive' | 'info' | 'neutral' | 'success' | 'warning'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'normal'
          listItem?: never
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'fileBlock'
        file: {
          asset: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
          }
          media?: unknown
          _type: 'file'
        }
        caption?: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | {
        _key: string
        _type: 'mux.video'
        asset: {
          _id: string
          _type: 'mux.videoAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          status?: string
          assetId?: string
          playbackId?: string
          filename?: string
          thumbTime?: number
          data?: MuxAssetData
        } | null
      }
    | {
        _key: string
        _type: 'table'
        rows?: Array<
          {
            _key: string
          } & TableRow
        >
      }
    | {
        _key: string
        _type: 'youtube'
        url: string
      }
  > | null
  category: {
    title: string
    slug: Slug
  } | null
  featuredImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  } | null
}>
// Variable: readingListItemQuery
// Query: *[_type == "readingList" && slug.current == $slug][0]{      _id,       title,       slug,       originalUrl,      category->{title, slug},       savedAt,       editedAt,       featuredImage{..., "caption": caption},      body[]{        ...,        _type == "mux.video" => {          asset->        }      }    }
export type ReadingListItemQueryResult = {
  _id: string
  title: string
  slug: Slug
  originalUrl: string
  category: {
    title: string
    slug: Slug
  } | null
  savedAt: string | null
  editedAt: null
  featuredImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption: string | null
    _type: 'image'
  } | null
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        _key: string
        _type: 'callout'
        tone?: 'destructive' | 'info' | 'neutral' | 'success' | 'warning'
        content?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'normal'
          listItem?: never
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'fileBlock'
        file: {
          asset: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
          }
          media?: unknown
          _type: 'file'
        }
        caption?: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: 'image'
        _key: string
      }
    | {
        _key: string
        _type: 'mux.video'
        asset: {
          _id: string
          _type: 'mux.videoAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          status?: string
          assetId?: string
          playbackId?: string
          filename?: string
          thumbTime?: number
          data?: MuxAssetData
        } | null
      }
    | {
        _key: string
        _type: 'table'
        rows?: Array<
          {
            _key: string
          } & TableRow
        >
      }
    | {
        _key: string
        _type: 'youtube'
        url: string
      }
  > | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[\n    _type == "post"\n    && defined(slug.current)\n  ]|order(publishedAt desc)[0...$limit]{\n    _id, \n    title, \n    slug, \n    publishedAt, \n    excerpt, \n    body[]{\n      ...,\n      _type == "mux.video" => {\n        asset->\n      }\n    }, \n    category->{title, slug}, \n    mainImage, \n    mainVideo{..., asset->},\n    author->{name, image}\n  }': PostsQueryResult
    '*[_type == "post" && slug.current == $slug && category->slug.current == $categorySlug][0]{\n      _id, \n      title, \n      slug, \n      subtitle, \n      intro, \n      category->{title, slug}, \n      publishedAt, \n      editedAt, \n      excerpt, \n      mainImage{..., "caption": caption},\n      hideMainImageOnPost,\n      mainVideo{..., asset->},\n      body[]{\n        ...,\n        _type == "mux.video" => {\n          asset->\n        }\n      }, \n      author->{name, image}\n    }': PostQueryResult
    '*[\n    _type == "category"\n    && count(*[_type == "readingList" && references(^._id)]) > 0\n  ]|order(title asc){\n    _id,\n    title,\n    slug,\n    description\n  }': CategoriesQueryResult
    '*[\n    _type == "readingList"\n    && defined(slug.current)\n  ]|order(savedAt desc)[0...$limit]{\n    _id, \n    title, \n    slug, \n    originalUrl,\n    savedAt, \n    body[]{\n      ...,\n      _type == "mux.video" => {\n        asset->\n      }\n    }, \n    category->{title, slug}, \n    featuredImage\n  }': ReadingListItemsQueryResult
    '*[_type == "readingList" && slug.current == $slug][0]{\n      _id, \n      title, \n      slug, \n      originalUrl,\n      category->{title, slug}, \n      savedAt, \n      editedAt, \n      featuredImage{..., "caption": caption},\n      body[]{\n        ...,\n        _type == "mux.video" => {\n          asset->\n        }\n      }\n    }': ReadingListItemQueryResult
  }
}
